---
import Heading from "./Heading.astro";
import Button from "./Button.astro";
import Skills from "./Skills.astro";
---

<div
  class="bg-bg2 lg:col-span-4 lg:col-start-1 lg:row-start-1 lg:rounded-lg flex flex-col lg:justify-between lg:min-h-screen"
  x-data="sidebar"
  x-init="init()"
>
  <div class="p-6 lg:p-8 flex-shrink-0" data-reveal>
    <Heading
      htmlheading="h2"
      type="div_heading"
      font="display2"
      stylingclasses="text-text-white lg:text-left mb-6"
    >
      Studerende med passion for at skabe intuitive interfaces
    </Heading>
  </div>

  <div
    class="rounded-lg p-4 lg:p-12 lg:mx-8 lg:mb-0 flex-shrink-0 lg:bg-bg1 mb-20 lg:mt-auto"
    data-reveal
  >
    <Heading
      htmlheading="h2"
      type="section_heading"
      stylingclasses="text-text-white mb-4 lg:mb-6"
    >
      Kontakt mig
    </Heading>

    <div class="grid gap-4">
      <Button variant="privateMail" />
      <Button variant="workMail" />
      <Button variant="call" />
      <Button variant="download" />
    </div>
  </div>

  <div class="p-6 lg:p-8 flex-shrink-0" data-reveal>
    <Heading
      htmlheading="h2"
      type="div_heading"
      font="display2"
      stylingclasses="text-text-white lg:text-left mb-6"
    >
      Digital Designer under konstruktion
    </Heading>
  </div>

  <div
    class="rounded-lg p-4 lg:p-12 lg:mx-8 lg:my-8 flex-shrink-0 lg:bg-bg1 mb-20 lg:mb-6"
    data-reveal
  >
    <Skills />
  </div>
</div>

<script type="module" is:inline>
  import Alpine from "https://unpkg.com/alpinejs@3.12.0/dist/module.esm.js";
  window.Alpine = Alpine;

  Alpine.data("sidebar", () => ({
    revealObserver: null,
    mutationObserver: null,
    _cleanupFn: null,

    init() {
      const root = this.$el;
      this._cleanupFn = () => this._cleanup();

      if (!window.matchMedia("(min-width: 1024px)").matches) {
        root
          .querySelectorAll("[data-reveal]")
          .forEach((el) => el.classList.add("revealed"));
        return;
      }

      const revealEls = Array.from(root.querySelectorAll("[data-reveal]"));

      revealEls.forEach((el) => {
        const rect = el.getBoundingClientRect();
        if (rect.top < window.innerHeight && rect.bottom > 0)
          el.classList.add("revealed");
      });

      this.revealObserver = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add("revealed");
              if (this.revealObserver)
                this.revealObserver.unobserve(entry.target);
            }
          });
        },
        { threshold: 0.1, rootMargin: "0px 0px -10% 0px" },
      );

      revealEls.forEach((el) => {
        if (!el.classList.contains("revealed")) this.revealObserver.observe(el);
      });

      window.addEventListener("beforeunload", this._cleanupFn);

      this.mutationObserver = new MutationObserver(() => {
        if (!document.body.contains(root)) this._cleanup();
      });
      this.mutationObserver.observe(document, {
        childList: true,
        subtree: true,
      });
    },

    _cleanup() {
      if (this.revealObserver) {
        this.revealObserver.disconnect();
        this.revealObserver = null;
      }
      if (this.mutationObserver) {
        this.mutationObserver.disconnect();
        this.mutationObserver = null;
      }
      if (this._cleanupFn) {
        window.removeEventListener("beforeunload", this._cleanupFn);
        this._cleanupFn = null;
      }
    },

    // Alpine will call this when the component is removed
    destroy() {
      this._cleanup();
    },
  }));

  Alpine.start();
</script>
