---
import Heading from "./Heading.astro";
import Button from "./Button.astro";
import Skills from "./Skills.astro";
---

<div
  class="bg-bg2 lg:col-span-4 lg:col-start-1 lg:row-start-1 lg:rounded-lg flex flex-col lg:justify-between lg:min-h-screen"
  x-data="sidebar()"
  x-init="init()"
>
  <div class="p-6 lg:p-8 flex-shrink-0" data-reveal>
    <Heading
      htmlheading="h2"
      type="div_heading"
      font="display2"
      stylingclasses="text-text-white lg:text-left mb-6"
    >
      Studerende med passion for at skabe intuitive interfaces
    </Heading>
  </div>

  <div
    class="rounded-lg p-4 lg:p-12 lg:mx-8 lg:mb-0 flex-shrink-0 lg:bg-bg1"
    data-reveal
  >
    <Heading
      htmlheading="h3"
      type="list_heading"
      font="display2"
      stylingclasses="text-text-white mb-4 lg:mb-6"
    >
      Kontakt mig
    </Heading>

    <div class="grid gap-4">
      <Button variant="privateMail" />
      <Button variant="workMail" />
      <Button variant="call" />
      <Button variant="download" />
    </div>
  </div>

  <div class="p-6 lg:p-8 flex-shrink-0" data-reveal>
    <Heading
      htmlheading="h2"
      type="div_heading"
      font="display2"
      stylingclasses="text-text-white lg:text-left mb-6"
    >
      Digital Designer under konstruktion
    </Heading>
  </div>

  <div
    class="rounded-lg p-4 lg:p-12 lg:mx-8 lg:my-8 flex-shrink-0 lg:bg-bg1"
    data-reveal
  >
    <Heading
      htmlheading="h3"
      type="list_heading"
      font="display2"
      stylingclasses="text-text-white mb-4 lg:mb-6"
    >
      Kompetencer
    </Heading>

    <Skills />
  </div>
</div>

<script type="module" is:inline>
  import Alpine from "https://unpkg.com/alpinejs@3.12.0/dist/module.esm.js";
  window.Alpine = Alpine;
  Alpine.start();

  window.sidebar = () => ({
    revealObserver: null,
    init() {
      const root = this.$el;

      if (!window.matchMedia("(min-width: 1024px)").matches) {
        root
          .querySelectorAll("[data-reveal]")
          .forEach((el) => el.classList.add("revealed"));
        return;
      }

      const revealEls = Array.from(root.querySelectorAll("[data-reveal]"));

      revealEls.forEach((el) => {
        const rect = el.getBoundingClientRect();
        if (rect.top < window.innerHeight && rect.bottom > 0)
          el.classList.add("revealed");
      });

      this.revealObserver = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add("revealed");
              this.revealObserver.unobserve(entry.target);
            }
          });
        },
        { threshold: 0.1, rootMargin: "0px 0px -10% 0px" },
      );

      revealEls.forEach((el) => {
        if (!el.classList.contains("revealed")) this.revealObserver.observe(el);
      });

      const cleanup = () => {
        if (this.revealObserver) this.revealObserver.disconnect();
      };

      window.addEventListener("beforeunload", cleanup);

      new MutationObserver(() => {
        if (!document.body.contains(root)) cleanup();
      }).observe(document, { childList: true, subtree: true });
    },
  });
</script>
