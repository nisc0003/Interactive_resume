---
import Heading from "./Heading.astro";
import Text from "./Text.astro";

const {
  title = "Projekt Titel",
  title2 = "Projekt Titel2",
  description = "Projekt beskrivelse",
  images = [],
  accent = null,
} = Astro.props;

/* accents */
const ACCENTS = {
  red: "bg-[var(--color-accent_red)]",
  yellow: "bg-[var(--color-accent_yellow)]",
  green: "bg-[var(--color-accent_green)]",
  blue: "bg-[var(--color-accent_blue)]",
  purple: "bg-[var(--color-accent_purple)]",
  orange: "bg-[var(--color-accent_orange)]",
};

function pickAccentFromTitle(t) {
  const keys = Object.keys(ACCENTS);
  let sum = 0;
  for (let i = 0; i < t.length; i++) sum += t.charCodeAt(i);
  return ACCENTS[keys[sum % keys.length]];
}

const accentClass =
  accent && ACCENTS[accent] ? ACCENTS[accent] : pickAccentFromTitle(title);
---

<article
  class="relative max-w-5xl mx-auto rounded-xl px-4 md:px-6 lg:px-10 py-4 md:py-6 grid grid-cols-1 md:grid-cols-2 gap-6 items-start border border-white/6 shadow-md transition-all duration-200 overflow-hidden"
  aria-label={title}
  data-card-carousel
>
  <div
    class={`absolute left-0 top-0 bottom-0 w-1 ${accentClass} opacity-90`}
    aria-hidden="true"
  >
  </div>

<<<<<<< HEAD
  <!-- Image panel (KEEP loading and object-cover as requested) -->
=======
>>>>>>> trial
  <div
    class="relative w-full rounded-lg overflow-hidden h-56 md:h-64 flex-shrink-0 flex items-center justify-center"
  >
    {
      images.map((image, index) => (
        <img
          src={image.src}
          alt={image.alt}
          loading="lazy"
          data-image={index}
          class={`absolute inset-0 w-full h-full object-cover object-center transition-opacity duration-700 ease-in-out ${index === 0 ? "opacity-100" : "opacity-0"}`}
        />
      ))
    }

    <div
      class="absolute inset-0 pointer-events-none bg-gradient-to-t from-black/30 via-transparent to-transparent"
    >
    </div>
  </div>

  <div class="flex flex-col gap-3 md:gap-4">
    <div class="flex items-center gap-3 w-full">
      <div class="min-w-0 flex-1">
        <Heading
          htmlheading="h3"
          type="div_heading"
          font="display1"
          stylingclasses="text-text-white leading-snug truncate"
        >
          {title}
        </Heading>
      </div>

      <span
        class={`inline-flex items-center gap-2 px-3 py-1 rounded-full text-xs font-medium text-white/95 ${accentClass} bg-opacity-90 ring-1 ring-white/6 flex-shrink-0`}
        aria-hidden="true"
      >
        <span class="w-2 h-2 rounded-full bg-white/30" aria-hidden="true"
        ></span>
        Projekt
      </span>
    </div>

    <Heading
      htmlheading="h4"
      type="card_heading"
<<<<<<< HEAD
      stylingclasses="text-text-white/90 text-sm md:text-base">{title2}</Heading
=======
      stylingclasses="text-text-white/90"
>>>>>>> trial
    >

<<<<<<< HEAD
    <Text
      stylingclasses="text-text-white/95 text-sm md:text-base leading-relaxed"
      >{description}</Text
    >
=======
    <Text stylingclasses="text-text-white/95 leading-relaxed">
      {description}
    </Text>
>>>>>>> trial

    <div class="mt-auto flex gap-3 items-center"><slot /></div>
  </div>
</article>

<script is:inline>
  (function () {
    // find the script node safely and the associated card - fallback to first matching data attribute
    const scriptNode =
      document.currentScript || document.querySelector("script[is\\:inline]");
    const card = scriptNode
      ? scriptNode.previousElementSibling ||
        document.querySelector("[data-card-carousel]")
      : document.querySelector("[data-card-carousel]");
    if (!card) return;

    const images = Array.from(card.querySelectorAll("[data-image]"));
    if (images.length <= 1) return;

    let currentIndex = 0;
    let intervalId = null;

    images.forEach((img, i) => {
      img.style.transition = "opacity 700ms ease-in-out";
      img.style.opacity = i === 0 ? "1" : "0";
    });

    function start() {
      if (intervalId) return;
      intervalId = setInterval(() => {
        images[currentIndex].style.opacity = "0";
        currentIndex = (currentIndex + 1) % images.length;
        images[currentIndex].style.opacity = "1";
      }, 4500);
    }

    function stop() {
      if (intervalId) {
        clearInterval(intervalId);
        intervalId = null;
      }
    }

    // pause when offscreen
    const io = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) start();
          else stop();
        });
      },
      { threshold: 0.1 },
    );

    io.observe(card);

    // cleanup if card removed or on page unload
    const mo = new MutationObserver(() => {
      if (!document.body.contains(card)) {
        stop();
        io.disconnect();
        mo.disconnect();
      }
    });
    mo.observe(document, { childList: true, subtree: true });
    window.addEventListener("beforeunload", stop, { passive: true });
  })();
</script>
