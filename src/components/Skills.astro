---
import Heading from "../components/Heading.astro";
import { Image } from "astro:assets";
import Blue from "../assets/star_blue.svg";
import Green from "../assets/star_green.svg";
import Yellow from "../assets/star_yellow.svg";
import Red from "../assets/star_red.svg";

const SKILLS = [
  {
    id: "frontend",
    title: "Frontend Udvikling",
    desc: [
      "Moderne webteknologier",
      "Performance optimering",
      "Responsivt design",
    ],
    stars: 5,
    accent: "blue",
  },
  {
    id: "ux",
    title: "UX / UI Design",
    desc: [
      "Brugercentreret design",
      "Prototyping & wireframing",
      "Designsystemer",
    ],
    stars: 4,
    accent: "yellow",
  },
  {
    id: "adobe",
    title: "Adobe Creative Cloud",
    desc: [
      "Grafisk design & illustration",
      "Foto- og videoredigering",
      "Motion graphics",
    ],
    stars: 3,
    accent: "green",
  },
  {
    id: "audio",
    title: "Lydproduktion",
    desc: ["Digital musikproduktion", "Lyddesign og mixing"],
    stars: 5,
    accent: "red",
  },
];

const ACCENT_CLASS = {
  blue: "bg-[var(--color-accent_blue)]",
  yellow: "bg-[var(--color-accent_yellow)]",
  green: "bg-[var(--color-accent_green)]",
  red: "bg-[var(--color-accent_red)]",
};

function starSrc(accent) {
  return accent === "blue"
    ? Blue
    : accent === "yellow"
      ? Yellow
      : accent === "green"
        ? Green
        : Red;
}
---

<div class="w-full max-w-5xl mx-auto px-4 lg:px-6 mb-8">
  <Heading
    htmlheading="h2"
    type="section_heading"
    stylingclasses="text-text-white mb-4 text-lg md:text-xl"
  >
    Kvalifikationer
  </Heading>

  <div class="flex flex-col gap-3">
    {
      SKILLS.map((skill, idx) => (
        <article
          key={skill.id}
          class="relative bg-transparent rounded-md p-3 md:p-4 border border-white/6 shadow-sm overflow-visible
               opacity-0 translate-y-2 will-change-transform transition-all duration-500"
          data-skill-card
          aria-labelledby={`skill-${skill.id}-title`}
          style={`animation-delay: ${idx * 60}ms;`}
        >
          <div class="grid grid-cols-1 md:grid-cols-[1fr_88px] gap-3 items-start">
            <div class="min-w-0 pr-2">
              <h3
                id={`skill-${skill.id}-title`}
                class="text-text-white text-sm md:text-sm font-semibold leading-tight"
              >
                {skill.title}
              </h3>

              <ul class="text-text-white/90 text-sm mt-2 space-y-0.5 whitespace-normal break-words">
                {skill.desc.map((d) => (
                  <li class="leading-snug text-sm">â€¢ {d}</li>
                ))}
              </ul>
            </div>

            <div class="flex items-start md:items-center justify-start md:justify-end">
              <div
                class="w-full md:w-[72px] flex items-center md:justify-end gap-1"
                aria-hidden="true"
              >
                {Array.from({ length: skill.stars }).map((_, i) => (
                  <Image
                    src={starSrc(skill.accent)}
                    alt="star"
                    width={14}
                    height={14}
                    class="w-3.5 h-3.5"
                  />
                ))}
              </div>
            </div>
          </div>
        </article>
      ))
    }
  </div>
</div>

<script is:inline>
  (function () {
    const io = new IntersectionObserver(
      (entries, obs) => {
        entries.forEach((entry) => {
          if (!entry.isIntersecting) return;
          entry.target.classList.remove("opacity-0", "translate-y-2");
          entry.target.classList.add("opacity-100", "translate-y-0");
          obs.unobserve(entry.target);
        });
      },
      { threshold: 0.12 },
    );

    document
      .querySelectorAll("[data-skill-card]")
      .forEach((el) => io.observe(el));
    // cleanup when navigating away (SPA) or unload
    const mo = new MutationObserver(() => {
      if (
        !document.body.contains(document.querySelector("[data-skill-card]"))
      ) {
        io.disconnect();
        mo.disconnect();
      }
    });
    mo.observe(document, { childList: true, subtree: true });
    window.addEventListener("beforeunload", () => io.disconnect(), {
      passive: true,
    });
  })();
</script>
